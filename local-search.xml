<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>优雅的 JavaScript 个技巧</title>
    <link href="/2022/03/08/article-5/"/>
    <url>/2022/03/08/article-5/</url>
    
    <content type="html"><![CDATA[<p>JavaScript 有很多很酷的特性，大多数初学者和中级开发人员都不知道。今天分享一些，我经常在项目中使用一些技巧。</p><span id="more"></span><h3 id="1-有条件地向对象添加属性"><a href="#1-有条件地向对象添加属性" class="headerlink" title="1. 有条件地向对象添加属性"></a>1. 有条件地向对象添加属性</h3><p>我们可以使用展开运算符号(<code>...</code>)来有条件地向 JS 对象快速添加属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> condition = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">const</span> person = &#123;<br><span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;John Doe&#x27;</span>,<br>...(condition &amp;&amp; &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">16</span> &#125;),<br>&#125;;<br></code></pre></td></tr></table></figure><p>如果每个操作数的值都为 <code>true</code>，则 <code>&amp;&amp;</code> 操作符返回最后一个求值表达式。因此返回一个对象<code>&#123;age: 16&#125;</code>，然后将其扩展为 <code>person</code> 对象的一部分。<br>如果 <code>condition</code> 为 <code>false</code>，JavaScript 会做这样的事情:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> person = &#123;<br><span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Robbin&#x27;</span>,<br>...(<span class="hljs-literal">false</span>),<br>&#125;;<br><span class="hljs-comment">// 展开 `false` 对对象没有影响</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person); <span class="hljs-comment">// &#123; id: 1, name: &#x27;John Doe&#x27; &#125;</span><br></code></pre></td></tr></table></figure><h3 id="2-检查属性是否存在对象中"><a href="#2-检查属性是否存在对象中" class="headerlink" title="2.检查属性是否存在对象中"></a>2.检查属性是否存在对象中</h3><p>可以使用 <code>in</code> 关键字来检查 JavaScript 对象中是否存在某个属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> person = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Robbin&#x27;</span>, <span class="hljs-attr">salary</span>: <span class="hljs-number">1000</span> &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;salary&#x27;</span> <span class="hljs-keyword">in</span> person); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;age&#x27;</span> <span class="hljs-keyword">in</span> person); <span class="hljs-comment">// false</span><br><br></code></pre></td></tr></table></figure><h3 id="3-对象中的动态属性名称"><a href="#3-对象中的动态属性名称" class="headerlink" title="3.对象中的动态属性名称"></a>3.对象中的动态属性名称</h3><p>使用动态键设置对象属性很简单。只需使用<code>[&#39;key name&#39;]</code>来添加属性:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> dynamic = <span class="hljs-string">&#x27;flavour&#x27;</span>;<br><span class="hljs-keyword">var</span> item = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Robbin&#x27;</span>,<br>[dynamic]: <span class="hljs-string">&#x27;巧克力&#x27;</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item); <span class="hljs-comment">// &#123; name: &#x27;Robbin&#x27;, flavour: &#x27;巧克力&#x27; &#125;</span><br></code></pre></td></tr></table></figure><p>同样的技巧也可用于使用动态键引用对象属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> keyName = <span class="hljs-string">&#x27;name&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item[keyName]); <span class="hljs-comment">// returns &#x27;Robbin&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="4-使用动态键进行对象解构"><a href="#4-使用动态键进行对象解构" class="headerlink" title="4. 使用动态键进行对象解构"></a>4. 使用动态键进行对象解构</h3><p>我们知道在对象解构时，可以使用 <code>:</code> 来对解构的属性进行重命名。但，你是否知道键名是动态的时，也可以解构对象的属性？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> person = &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Robbin&#x27;</span> &#125;;<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">name</span>: personName &#125; = person;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(personName); <span class="hljs-comment">// &#x27;Robbin&#x27;</span><br></code></pre></td></tr></table></figure><p>现在，我们用动态键来解构属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> templates = &#123;<br><span class="hljs-string">&#x27;hello&#x27;</span>: <span class="hljs-string">&#x27;Hello there&#x27;</span>,<br><span class="hljs-string">&#x27;bye&#x27;</span>: <span class="hljs-string">&#x27;Good bye&#x27;</span><br>&#125;;<br><span class="hljs-keyword">const</span> templateName = <span class="hljs-string">&#x27;bye&#x27;</span>;<br><br><span class="hljs-keyword">const</span> &#123; [templateName]: template &#125; = templates;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(template); <span class="hljs-comment">// Good bye</span><br></code></pre></td></tr></table></figure><h3 id="5-空值合并-操作符"><a href="#5-空值合并-操作符" class="headerlink" title="5. 空值合并 ?? 操作符"></a>5. 空值合并 <code>??</code> 操作符</h3><p>当我们想检查一个变量是否为 <code>null</code> 或 <code>undefined</code> 时，??操作符很有用。当它的左侧操作数为 <code>null</code> 或 <code>undefined</code> 时，它返回右侧的操作数，否则返回其左侧的操作数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> foo = <span class="hljs-literal">null</span> ?? <span class="hljs-string">&#x27;Hello&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo); <span class="hljs-comment">// &#x27;Hello&#x27;</span><br><br><span class="hljs-keyword">const</span> bar = <span class="hljs-string">&#x27;Not null&#x27;</span> ?? <span class="hljs-string">&#x27;Hello&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bar); <span class="hljs-comment">// &#x27;Not null&#x27;</span><br><br><span class="hljs-keyword">const</span> baz = <span class="hljs-number">0</span> ?? <span class="hljs-string">&#x27;Hello&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(baz); <span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure><p>在第三个示例中，返回 <code>0</code>，因为即使 <code>0</code> 在 JS 中被认为是假的，但它不是 <code>null</code> 的或 <code>undefined</code> 的。你可能认为我们可以用||算子但这两者之间是有区别的</p><p>你可能认为我们可以在这里使用 <code>||</code> 操作符，但这两者之间是有区别的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> cannotBeZero = <span class="hljs-number">0</span> || <span class="hljs-number">5</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(cannotBeZero); <span class="hljs-comment">// 5</span><br><br><span class="hljs-keyword">const</span> canBeZero = <span class="hljs-number">0</span> ?? <span class="hljs-number">5</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(canBeZero); <span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure><h3 id="6-可选链"><a href="#6-可选链" class="headerlink" title="6.可选链 ?."></a>6.可选链 <code>?.</code></h3><p>我们是不是经常遇到这样的错误： <code>TypeError: Cannot read property ‘foo’ of null</code>。这对每一个毅开发人员来说都是一个烦人的问题。引入可选链就是为了解决这个问题。一起来看看：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> book = &#123; <span class="hljs-attr">id</span>:<span class="hljs-number">1</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Title&#x27;</span>, <span class="hljs-attr">author</span>: <span class="hljs-literal">null</span> &#125;;<br><br><span class="hljs-comment">// 通常情况下，你会这样做</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(book.<span class="hljs-property">author</span>.<span class="hljs-property">age</span>) <span class="hljs-comment">// throws error</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(book.<span class="hljs-property">author</span> &amp;&amp; book.<span class="hljs-property">author</span>.<span class="hljs-property">age</span>); <span class="hljs-comment">// null</span><br><br><span class="hljs-comment">// 使用可选链</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(book.<span class="hljs-property">author</span>?.<span class="hljs-property">age</span>); <span class="hljs-comment">// undefined</span><br><span class="hljs-comment">// 或深度可选链</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(book.<span class="hljs-property">author</span>?.<span class="hljs-property">address</span>?.<span class="hljs-property">city</span>); <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><p>还可以使用如下函数可选链：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> person = &#123;<br><span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;前端&#x27;</span>,<br><span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Robbin&#x27;</span>,<br><span class="hljs-attr">printName</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.firstName&#125;</span> <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.lastName&#125;</span>`</span>;<br>&#125;,<br>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-title function_">printName</span>()); <span class="hljs-comment">// &#x27;前端 Robbin&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(persone.<span class="hljs-property">doesNotExist</span>?.()); <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><h3 id="7-使用-操作符"><a href="#7-使用-操作符" class="headerlink" title="7. 使用 !! 操作符"></a>7. 使用 <code>!!</code> 操作符</h3><p>!! 运算符可用于将表达式的结果快速转换为布尔值(<code>true</code> 或 <code>false</code>):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> greeting = <span class="hljs-string">&#x27;Hello there!&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(!!greeting) <span class="hljs-comment">// true</span><br><br><span class="hljs-keyword">const</span> noGreeting = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(!!noGreeting); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h3 id="8-字符串和整数转换"><a href="#8-字符串和整数转换" class="headerlink" title="8. 字符串和整数转换"></a>8. 字符串和整数转换</h3><p>使用 <code>+</code> 操作符将字符串快速转换为数字:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> stringNumer = <span class="hljs-string">&#x27;123&#x27;</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(+stringNumer); <span class="hljs-comment">//123</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> +stringNumer); <span class="hljs-comment">//&#x27;number&#x27;</span><br></code></pre></td></tr></table></figure><p>要将数字快速转换为字符串，也可以使用 <code>+</code> 操作符，后面跟着一个空字符串:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> myString = <span class="hljs-number">25</span> + <span class="hljs-string">&#x27;&#x27;</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myString); <span class="hljs-comment">//&#x27;25&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> myString); <span class="hljs-comment">//&#x27;string&#x27;</span><br></code></pre></td></tr></table></figure><p>这些类型转换非常方便，但它们的清晰度和代码可读性较差。所以实际开发，需要慎重的选择使用。</p><h3 id="9-检查数组中的假值"><a href="#9-检查数组中的假值" class="headerlink" title="9. 检查数组中的假值"></a>9. 检查数组中的假值</h3><p>大家应该都用过数组方法：<code>filter</code>、<code>some</code>、<code>every</code>，这些方法可以配合 <code>Boolean</code> 方法来测试真假值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> myArray = [<span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-literal">undefined</span>, <span class="hljs-number">0</span>];<br><br><span class="hljs-comment">// 过滤虚值</span><br><span class="hljs-keyword">const</span> filtered = myArray.<span class="hljs-title function_">filter</span>(<span class="hljs-title class_">Boolean</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(filtered); <span class="hljs-comment">// [&#x27;Hello&#x27;]</span><br><br><span class="hljs-comment">// 检查至少一个值是否为真</span><br><span class="hljs-keyword">const</span> anyTruthy = myArray.<span class="hljs-title function_">some</span>(<span class="hljs-title class_">Boolean</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(anyTruthy); <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// 检查所有的值是否为真</span><br><span class="hljs-keyword">const</span> allTruthy = myArray.<span class="hljs-title function_">every</span>(<span class="hljs-title class_">Boolean</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(allTruthy); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>下面是它的工作原理。我们知道这些数组方法接受一个回调函数，所以我们传递 <code>Boolean</code> 作为回调函数。<code>Boolean</code> 函数本身接受一个参数，并根据参数的真实性返回 <code>true</code> 或 <code>false</code>。所以：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">myArray.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">val</span> =&gt;</span> <span class="hljs-title class_">Boolean</span>(val));<br></code></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">myArray.<span class="hljs-title function_">filter</span>(<span class="hljs-title class_">Boolean</span>);<br></code></pre></td></tr></table></figure><h3 id="10-扁平化数组"><a href="#10-扁平化数组" class="headerlink" title="10. 扁平化数组"></a>10. 扁平化数组</h3><p>在原型 Array 上有一个方法 <code>flat</code>，可以从一个数组的数组中制作一个单一的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> myArray = [&#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span> &#125;, [&#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span> &#125;], [&#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span> &#125;]];<br><br><span class="hljs-keyword">const</span> flattedArray = myArray.<span class="hljs-title function_">flat</span>();<br><span class="hljs-comment">//[ &#123; id: 1 &#125;, &#123; id: 2 &#125;, &#123; id: 3 &#125; ]</span><br></code></pre></td></tr></table></figure><p>你也可以定义一个深度级别，指定一个嵌套的数组结构应该被扁平化的深度。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [[[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]]]];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">flat</span>(<span class="hljs-number">2</span>)); <span class="hljs-comment">// returns [0, 1, 2, [3,4]]</span><br></code></pre></td></tr></table></figure><h3 id="11-Object-entries"><a href="#11-Object-entries" class="headerlink" title="11.Object.entries"></a>11.Object.entries</h3><p>大多数开发人员使用 <code>Object.keys</code> 方法来迭代对象。 此方法仅返回对象键的数组，而不返回值。 我们可以使用 <code>Object.entries</code> 来获取键和值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> person = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Robbin&#x27;</span>,<br><span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>&#125;;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(person); <span class="hljs-comment">// [&#x27;name&#x27;, &#x27;age&#x27;]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(data); <span class="hljs-comment">// [[&#x27;name&#x27;, &#x27;Robbin&#x27;], [&#x27;age&#x27;, 20]]</span><br></code></pre></td></tr></table></figure><p>为了迭代一个对象，我们可以执行以下操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(person).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span> is <span class="hljs-subst">$&#123;person[key]&#125;</span>`</span>);<br>&#125;);<br><br><span class="hljs-comment">// 使用 entries 获取键和值</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(person).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">[key, value]</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span> is <span class="hljs-subst">$&#123;value&#125;</span>`</span>);<br>&#125;);<br><br><span class="hljs-comment">// name is Robbin</span><br><span class="hljs-comment">// age is 20</span><br></code></pre></td></tr></table></figure><p>上述两种方法都返回相同的结果，但 <code>Object.entries</code> 获取键值对更容易。</p><h3 id="12-replaceAll-方法"><a href="#12-replaceAll-方法" class="headerlink" title="12.replaceAll 方法"></a>12.replaceAll 方法</h3><p>在 JS 中，要将所有出现的字符串替换为另一个字符串，我们需要使用如下所示的正则表达式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;Red-Green-Blue&#x27;</span>;<br><br><span class="hljs-comment">// 只规制第一次出现的</span><br>str.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>); <span class="hljs-comment">// Red Green-Blue</span><br><br><span class="hljs-comment">// 使用 RegEx 替换所有匹配项</span><br>str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\-/g</span>, <span class="hljs-string">&#x27; &#x27;</span>); <span class="hljs-comment">// Red Green Blue</span><br></code></pre></td></tr></table></figure><p>但是在 ES12 中，一个名为 <code>replaceAll</code> 的新方法被添加到 <code>String.prototype</code> 中，它用另一个字符串值替换所有出现的字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">str.<span class="hljs-title function_">replaceAll</span>(<span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>); <span class="hljs-comment">// Red Green Blue</span><br></code></pre></td></tr></table></figure><h3 id="13-数字分隔符"><a href="#13-数字分隔符" class="headerlink" title="13.数字分隔符"></a>13.数字分隔符</h3><p>可以使用下划线作为数字分隔符，这样可以方便地计算数字中 0 的个数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 难以阅读</span><br><span class="hljs-keyword">const</span> billion = <span class="hljs-number">1000000000</span>;<br><br><span class="hljs-comment">// 易于阅读</span><br><span class="hljs-keyword">const</span> readableBillion = <span class="hljs-number">1000_000_000</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(readableBillion) <span class="hljs-comment">//1000000000</span><br></code></pre></td></tr></table></figure><p>下划线分隔符也可以用于 BigInt 数字，如下例所示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> trillion = <span class="hljs-number">1000_000_000_000n</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(trillion); <span class="hljs-comment">// 10000000000</span><br></code></pre></td></tr></table></figure><h3 id="14-document-designMode"><a href="#14-document-designMode" class="headerlink" title="14.document.designMode"></a>14.document.designMode</h3><p>与前端的 JavaScript 有关，设计模式让你可以编辑页面上的任何内容。只要打开浏览器控制台，输入以下内容即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">document</span>.<span class="hljs-property">designMode</span> = <span class="hljs-string">&#x27;on&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="15-逻辑赋值运算符"><a href="#15-逻辑赋值运算符" class="headerlink" title="15.逻辑赋值运算符"></a>15.逻辑赋值运算符</h3><p>逻辑赋值运算符是由逻辑运算符<code>&amp;&amp;</code>、<code>||</code>、<code>??</code>和赋值运算符<code>=</code>组合而成。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">const</span> b = <span class="hljs-number">2</span>;<br><br>a &amp;&amp;= b;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// 2</span><br><br><span class="hljs-comment">// 上面等价于</span><br>a &amp;&amp; (a = b);<br><br><span class="hljs-comment">// 或者</span><br><span class="hljs-keyword">if</span> (a) &#123;<br>a = b<br>&#125;<br><br></code></pre></td></tr></table></figure><p>检查 <code>a</code> 的值是否为真，如果为真，那么更新 <code>a</code> 的值。使用逻辑或 <code>||</code>操作符也可以做同样的事情。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> a = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">const</span> b = <span class="hljs-number">3</span>;<br><br>a ||= b;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// 3</span><br><br><span class="hljs-comment">// 上面等价于</span><br>a || (a = b);<br></code></pre></td></tr></table></figure><p>使用空值合并操作符 ??:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> a = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">const</span> b = <span class="hljs-number">3</span>;<br><br>a ??= b;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// 3</span><br><br><span class="hljs-comment">// 上面等价于</span><br><span class="hljs-keyword">if</span> (a === <span class="hljs-literal">null</span> || a === <span class="hljs-literal">undefined</span>) &#123;<br>  a = b;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：<code>??</code>操作符只检查 <code>null</code> 或 <code>undefined</code> 的值。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>#前端</tag>
      
      <tag>#JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【面试】说说 typeof 和 instanceof 的区别</title>
    <link href="/2022/03/08/article-4/"/>
    <url>/2022/03/08/article-4/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>typeof 和 instanceof 操作符都是用来判断数据类型的，但是它们的使用场景却各不相同，其中一些细节也需要特别注意。接下来让我们一探究竟，彻底掌握该知识点，再也不惧面试官的提问。</p><span id="more"></span><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>typeof 是一个一元运算符，放在一个运算数前面，这个运算数可以是任何类型。它返回一个字符串，说明运算数的类型。请看栗子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> type =  <span class="hljs-keyword">typeof</span> <span class="hljs-string">&#x27;中国万岁&#x27;</span>; <span class="hljs-comment">// string</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-number">666</span>; <span class="hljs-comment">// number</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// boolean</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// undefined</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Symbol</span>(); <span class="hljs-comment">// symbol</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-number">1n</span>; <span class="hljs-comment">// bigint</span><br><span class="hljs-keyword">typeof</span> () =&gt; &#123;&#125;; <span class="hljs-comment">// function</span><br><br><span class="hljs-keyword">typeof</span> []; <span class="hljs-comment">// object</span><br><span class="hljs-keyword">typeof</span> &#123;&#125;; <span class="hljs-comment">// object</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>); <span class="hljs-comment">// object</span><br><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">// object</span><br></code></pre></td></tr></table></figure><p>通过以上例子可以看出，typeof 只能准确判断基本数据类型和函数（函数其实是对象，并不属于另一种数据类型，但也能够使用 typeof 进行区分），无法精确判断出引用数据类型（统统返回 object）。<br>有一点需要注意，调用 typeof null 返回的是 object，这是因为特殊值 null 被认为是一个对空对象的引用（也叫空对象指针）。<br>如果想准确判断引用数据类型，可以用 instanceof 运算符。</p><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><p>instanceof 运算符放在一个运算数的后面，对象的前面。它返回一个布尔值，说明运算数是否是某个对象的实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> result = [] <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>; <span class="hljs-comment">// true</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Person</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;;<br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>p <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Person</span>; <span class="hljs-comment">// true</span><br><br><span class="hljs-keyword">const</span> message = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>);<br>message <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">String</span>; <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>typeof 会返回一个运算数的基本类型，instanceof 返回的是布尔值</p><p>instanceof 可以准确判断引用数据类型，但是不能正确判断基本数据类型</p><p>typeof 虽然可以判断基本数据类型（null 除外），但是无法判断引用数据类型（function 除外）</p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>Object.prototype.toString.call()<br>typeof 和 instanceof 都有一定的弊端，并不能满足所有场景的需求。如果需要通用检测数据类型，可以使用 Object.prototype.toString.call()方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(&#123;&#125;); <span class="hljs-comment">// &quot;[object Object]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>([]); <span class="hljs-comment">// &quot;[object Array]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-number">666</span>); <span class="hljs-comment">// &quot;[object Number]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>); <span class="hljs-comment">// &quot;[object String]&quot;</span><br></code></pre></td></tr></table></figure><p>注意，该方法返回的是一个格式为”[object Object]”的字符串。<br>封装函数<br>为了更方便的使用，我们可以将这个方法进行封装：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getType</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-keyword">let</span> type = <span class="hljs-keyword">typeof</span> value;<br>    <span class="hljs-keyword">if</span> (type !== <span class="hljs-string">&#x27;object&#x27;</span>) &#123; <span class="hljs-comment">// 如果是基本数据类型，直接返回</span><br>        <span class="hljs-keyword">return</span> type;<br>    &#125;<br>    <span class="hljs-comment">// 如果是引用数据类型，再进一步判断，正则返回结果</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(value).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\[object (\S+)\]$/</span>, <span class="hljs-string">&#x27;$1&#x27;</span>);<br>&#125;<br><br><span class="hljs-title function_">getType</span>(<span class="hljs-number">123</span>); <span class="hljs-comment">// number</span><br><span class="hljs-title function_">getType</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>); <span class="hljs-comment">// string</span><br><span class="hljs-title function_">getType</span>(<span class="hljs-function">() =&gt;</span> &#123;&#125;); <span class="hljs-comment">// function</span><br><span class="hljs-title function_">getType</span>([]); <span class="hljs-comment">// Array</span><br><span class="hljs-title function_">getType</span>(&#123;&#125;); <span class="hljs-comment">// Object</span><br><span class="hljs-title function_">getType</span>(<span class="hljs-literal">null</span>); <span class="hljs-comment">// Null</span><br></code></pre></td></tr></table></figure><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>如果文中有错误或者不足之处，欢迎大家在评论区指正。</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>#前端</tag>
      
      <tag>#面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fluid 页脚增加网站运行时长</title>
    <link href="/2022/03/07/article-3/"/>
    <url>/2022/03/07/article-3/</url>
    
    <content type="html"><![CDATA[<p>Fluid 1.8.4 版本支持自定义页脚内容了，群友常改的网站运行时长，这次无需再修改源代码。</p><p>只需要在主题配置中的 <code>footer: content</code> 添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs XML">footer:<br>  content: &#x27;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://hexo.io&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;nofollow noopener&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hexo<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-love&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://github.com/fluid-dev/hexo-theme-fluid&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;nofollow noopener&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Fluid<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 0.85rem&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;timeDate&quot;</span>&gt;</span>载入天数...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;times&quot;</span>&gt;</span>载入时分秒...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/duration.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  &#x27;<br></code></pre></td></tr></table></figure><p><code>content</code> 前三行是 Fluid 原有的页脚内容，建议不要删除，可稍作修改，保留 Fluid 的超链接，用于向更多人推广主题。</p><p><code>duration.js</code> 包含的才是功能代码，我们在博客目录下创建 <code>source/js/duration.js</code>，内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">!(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">/** 计时起始时间，自行修改 **/</span><br>  <span class="hljs-keyword">var</span> start = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;2022/02/02 00:00:00&quot;</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    now.<span class="hljs-title function_">setTime</span>(now.<span class="hljs-title function_">getTime</span>()+<span class="hljs-number">250</span>);<br>    days = (now - start) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> / <span class="hljs-number">24</span>;<br>    dnum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(days);<br>    hours = (now - start) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * dnum);<br>    hnum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(hours);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title class_">String</span>(hnum).<span class="hljs-property">length</span> === <span class="hljs-number">1</span> )&#123;<br>      hnum = <span class="hljs-string">&quot;0&quot;</span> + hnum;<br>    &#125;<br>    minutes = (now - start) / <span class="hljs-number">1000</span> /<span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * dnum) - (<span class="hljs-number">60</span> * hnum);<br>    mnum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(minutes);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title class_">String</span>(mnum).<span class="hljs-property">length</span> === <span class="hljs-number">1</span> )&#123;<br>      mnum = <span class="hljs-string">&quot;0&quot;</span> + mnum;<br>    &#125;<br>    seconds = (now - start) / <span class="hljs-number">1000</span> - (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * dnum) - (<span class="hljs-number">60</span> * <span class="hljs-number">60</span> * hnum) - (<span class="hljs-number">60</span> * mnum);<br>    snum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(seconds);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title class_">String</span>(snum).<span class="hljs-property">length</span> === <span class="hljs-number">1</span> )&#123;<br>      snum = <span class="hljs-string">&quot;0&quot;</span> + snum;<br>    &#125;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;timeDate&quot;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;本站安全运行&amp;nbsp&quot;</span>+dnum+<span class="hljs-string">&quot;&amp;nbsp天&quot;</span>;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;times&quot;</span>).<span class="hljs-property">innerHTML</span> = hnum + <span class="hljs-string">&quot;&amp;nbsp小时&amp;nbsp&quot;</span> + mnum + <span class="hljs-string">&quot;&amp;nbsp分&amp;nbsp&quot;</span> + snum + <span class="hljs-string">&quot;&amp;nbsp秒&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-title function_">update</span>();<br>  <span class="hljs-built_in">setInterval</span>(update, <span class="hljs-number">1000</span>);<br>&#125;)();<br></code></pre></td></tr></table></figure><p>不要忘记把上面注释的时间改为自己的时间，至此这项功能就引入到<code>&lt;footer&gt;</code> 里了。</p>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>#基础</tag>
      
      <tag>#Fluid</tag>
      
      <tag>#页脚</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7个常见的前端手写功能</title>
    <link href="/2022/03/07/article-2/"/>
    <url>/2022/03/07/article-2/</url>
    
    <content type="html"><![CDATA[<p>今天给大家带来的是 7 个常见的 JavaScript 手写功能，重要的地方已添加注释。有的是借鉴别人的，有的是自己写的，如有不正确的地方，欢迎多多指正。</p><span id="more"></span><h3 id="1-防抖"><a href="#1-防抖" class="headerlink" title="1.防抖"></a>1.防抖</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span><span class="hljs-params">(fn, delay)</span> &#123;<br>  let timer<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-params">(<span class="hljs-rest_arg">...args</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (timer) &#123;<br>      clearTimeout(timer)<br>    &#125;<br>    timer = setTimeout(() =&gt; &#123;<br>      fn.apply(<span class="hljs-keyword">this</span>, args)<br>    &#125;, delay)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 测试</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">task</span><span class="hljs-params">()</span> &#123;<br>console.log(<span class="hljs-string">&#x27;run task&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">const</span> debounceTask = debounce(task, <span class="hljs-number">1000</span>)<br>window.addEventListener(<span class="hljs-string">&#x27;scroll&#x27;</span>, debounceTask)<br><br></code></pre></td></tr></table></figure><h3 id="2-节流"><a href="#2-节流" class="headerlink" title="2.节流"></a>2.节流</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">throttle</span>(<span class="hljs-params">fn, delay</span>) &#123;<br>  let last = <span class="hljs-number">0</span> <span class="hljs-comment">// 上次触发时间</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> &#123;<br>    const <span class="hljs-built_in">now</span> = <span class="hljs-built_in">Date</span>.<span class="hljs-built_in">now</span>()<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">now</span> - last &gt; delay) &#123;<br>      last = <span class="hljs-built_in">now</span><br>      fn.apply(this, args)<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 测试</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">task</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;run task&#x27;</span>)<br>&#125;<br>const throttleTask = throttle(task, <span class="hljs-number">1000</span>)<br>window.addEventListener(<span class="hljs-string">&#x27;scroll&#x27;</span>, throttleTask)<br><br></code></pre></td></tr></table></figure><h3 id="3-深拷贝"><a href="#3-深拷贝" class="headerlink" title="3.深拷贝"></a>3.深拷贝</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepClone</span>(<span class="hljs-params">obj, cache = <span class="hljs-keyword">new</span> <span class="hljs-built_in">WeakMap</span>()</span>) &#123;<br>  <span class="hljs-keyword">if</span> (obj === <span class="hljs-literal">null</span> || <span class="hljs-keyword">typeof</span> obj !== <span class="hljs-string">&#x27;object&#x27;</span>) <span class="hljs-keyword">return</span> obj<br>  <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Date</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(obj)<br>  <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">RegExp</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(obj)<br><br>  <span class="hljs-keyword">if</span> (cache.<span class="hljs-title function_">get</span>(obj)) <span class="hljs-keyword">return</span> cache.<span class="hljs-title function_">get</span>(obj) <span class="hljs-comment">// 如果出现循环引用，则返回缓存的对象，防止递归进入死循环</span><br>  <span class="hljs-keyword">let</span> cloneObj = <span class="hljs-keyword">new</span> obj.<span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) <span class="hljs-comment">// 使用对象所属的构造函数创建一个新对象</span><br>  cache.<span class="hljs-title function_">set</span>(obj, cloneObj) <span class="hljs-comment">// 缓存对象，用于循环引用的情况</span><br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>    <span class="hljs-keyword">if</span> (obj.<span class="hljs-title function_">hasOwnProperty</span>(key)) &#123;<br>      cloneObj[key] = <span class="hljs-title function_">deepClone</span>(obj[key], cache) <span class="hljs-comment">// 递归拷贝</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> cloneObj<br>&#125;<br><br><span class="hljs-comment">// 测试</span><br><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Jack&#x27;</span>, <span class="hljs-attr">address</span>: &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">200</span> &#125; &#125;<br>obj.<span class="hljs-property">a</span> = obj <span class="hljs-comment">// 循环引用</span><br><span class="hljs-keyword">const</span> newObj = <span class="hljs-title function_">deepClone</span>(obj)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newObj.<span class="hljs-property">address</span> === obj.<span class="hljs-property">address</span>) <span class="hljs-comment">// false</span><br><br></code></pre></td></tr></table></figure><h3 id="4-异步控制并发数"><a href="#4-异步控制并发数" class="headerlink" title="4.异步控制并发数"></a>4.异步控制并发数</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">limitRequest</span>(<span class="hljs-params">urls = [], limit = <span class="hljs-number">3</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Promise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    const len = urls.<span class="hljs-built_in">length</span><br>    let <span class="hljs-built_in">count</span> = <span class="hljs-number">0</span><br><br>    <span class="hljs-comment">// 同时启动limit个任务</span><br>    <span class="hljs-keyword">while</span> (limit &gt; <span class="hljs-number">0</span>) &#123;<br>      start()<br>      limit -= <span class="hljs-number">1</span><br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">start</span>(<span class="hljs-params"></span>) &#123;<br>      const url = urls.shift() <span class="hljs-comment">// 从数组中拿取第一个任务</span><br>      <span class="hljs-keyword">if</span> (url) &#123;<br>        axios.post(url).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>          <span class="hljs-comment">// todo</span><br>        &#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>          <span class="hljs-comment">// todo</span><br>        &#125;).finally(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (<span class="hljs-built_in">count</span> == len - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 最后一个任务完成</span><br>            resolve()<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 完成之后，启动下一个任务</span><br>            <span class="hljs-built_in">count</span>++<br>            start()<br>          &#125;<br>        &#125;)<br>      &#125;<br>    &#125;<br><br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-数组排序"><a href="#5-数组排序" class="headerlink" title="5.数组排序"></a>5.数组排序</h3><p class="note note-success">sort 排序</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 对数字进行排序，简写<br>const arr = [<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>]<br>arr.sort((a, b) =&gt; a - b)<br>console.log(arr) <span class="hljs-regexp">//</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><br><span class="hljs-regexp">//</span> 对字母进行排序，简写<br>const arr = [<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<br>arr.sort()<br>console.log(arr) <span class="hljs-regexp">//</span> [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>]<br><br></code></pre></td></tr></table></figure><p class="note note-success">冒泡排序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">bubbleSort</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">let</span> len = arr.<span class="hljs-property">length</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++) &#123;<br>    <span class="hljs-comment">// 从第一个元素开始，比较相邻的两个元素，前者大就交换位置</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; len - <span class="hljs-number">1</span> - i; j++) &#123;<br>      <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>        <span class="hljs-keyword">let</span> num = arr[j]<br>        arr[j] = arr[j + <span class="hljs-number">1</span>]<br>        arr[j + <span class="hljs-number">1</span>] = num<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// 每次遍历结束，都能找到一个最大值，放在数组最后</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> arr<br>&#125;<br><br><span class="hljs-comment">//测试</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">bubbleSort</span>([<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>])) <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br><br></code></pre></td></tr></table></figure><h3 id="6-数组去重"><a href="#6-数组去重" class="headerlink" title="6.数组去重"></a>6.数组去重</h3><p class="note note-success">Set 去重</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe">const <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span> = [...<span class="hljs-keyword">new</span> <span class="hljs-type">Set</span>(arr)]<br><span class="hljs-comment">// 或</span><br>const <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span> = <span class="hljs-keyword">Array</span>.from(<span class="hljs-keyword">new</span> <span class="hljs-type">Set</span>(arr))<br></code></pre></td></tr></table></figure><p class="note note-success">indexOf 去重</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">resetArr</span>(<span class="hljs-params">arr</span>) &#123;<br>  let res = []<br>  arr.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (res.<span class="hljs-built_in">indexOf</span>(item) === <span class="hljs-number">-1</span>) &#123;<br>      res.<span class="hljs-built_in">push</span>(item)<br>    &#125;<br>  &#125;)<br>  <span class="hljs-keyword">return</span> res<br>&#125;<br><br><span class="hljs-comment">// 测试</span><br>const arr = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(resetArr(arr)) <span class="hljs-comment">// [1, 2, 3]</span><br></code></pre></td></tr></table></figure><h3 id="7-获取-url-参数"><a href="#7-获取-url-参数" class="headerlink" title="7.获取 url 参数"></a>7.获取 url 参数</h3><p class="note note-success">URLSearchParams 方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 创建一个URLSearchParams实例</span><br>const urlSearchParams = <span class="hljs-keyword">new</span> <span class="hljs-constructor">URLSearchParams(<span class="hljs-params">window</span>.<span class="hljs-params">location</span>.<span class="hljs-params">search</span>)</span>;<br><span class="hljs-comment">// 把键值对列表转换为一个对象</span><br>const params = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>from<span class="hljs-constructor">Entries(<span class="hljs-params">urlSearchParams</span>.<span class="hljs-params">entries</span>()</span>);<br></code></pre></td></tr></table></figure><p class="note note-success">split 方法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs stylus">function <span class="hljs-built_in">getParams</span>(url) &#123;<br>  const res = &#123;&#125;<br>  <span class="hljs-keyword">if</span> (url<span class="hljs-selector-class">.includes</span>(<span class="hljs-string">&#x27;?&#x27;</span>)) &#123;<br>    const str = url<span class="hljs-selector-class">.split</span>(<span class="hljs-string">&#x27;?&#x27;</span>)<span class="hljs-selector-attr">[1]</span><br>    const arr = str<span class="hljs-selector-class">.split</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span>)<br>    arr<span class="hljs-selector-class">.forEach</span>(item =&gt; &#123;<br>      const key = item<span class="hljs-selector-class">.split</span>(<span class="hljs-string">&#x27;=&#x27;</span>)<span class="hljs-selector-attr">[0]</span><br>      const val = item<span class="hljs-selector-class">.split</span>(<span class="hljs-string">&#x27;=&#x27;</span>)<span class="hljs-selector-attr">[1]</span><br>      res<span class="hljs-selector-attr">[key]</span> = <span class="hljs-built_in">decodeURIComponent</span>(val) <span class="hljs-comment">// 解码</span><br>    &#125;)<br>  &#125;<br>  return res<br>&#125;<br><br><span class="hljs-comment">// 测试</span><br>const user = <span class="hljs-built_in">getParams</span>(<span class="hljs-string">&#x27;https://www.baidu.com/?user=robbin&amp;age=18&#x27;</span>)<br>console<span class="hljs-selector-class">.log</span>(user) <span class="hljs-comment">// &#123; user: &#x27;robbin&#x27;, age: &#x27;18&#x27; &#125;</span><br><br></code></pre></td></tr></table></figure><p>以上就是工作或求职中最常见的手写功能，你是不是全都掌握了呢!!!</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>#基础</tag>
      
      <tag>#前端</tag>
      
      <tag>#JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初学者前端入门路线</title>
    <link href="/2022/03/04/article-1/"/>
    <url>/2022/03/04/article-1/</url>
    
    <content type="html"><![CDATA[<p>前端学习路线图和资源自己找上门来，快来收藏！！！<br><img src="/./images/v2-54b23630f61e3f19acbe7089c8ccb1bf_720w.jpg" alt="前端学习路线图"></p><p class="note note-success">HTML+CSS-->移动 web->JavaScript 基础-->Web APIs->数据交互&异步编程-->Node.js-->Vue2+Vue3-->React 核心技术-->微信小程序</p><h2 id="第一阶段：基础入门"><a href="#第一阶段：基础入门" class="headerlink" title="第一阶段：基础入门"></a>第一阶段：基础入门</h2><p><a href="https://www.bilibili.com/video/BV1Kg411T7t9">web 前端开发入门教程，前端零基础 html5+css3+前端项目视频教程</a><br><a href="https://www.bilibili.com/video/BV1xq4y1q7jZ">web 前端进阶教程，前端 html5+css3+移动端项目实战（含华为新闻，b 站移动端等）</a></p><h2 id="第二阶段：技术进阶"><a href="#第二阶段：技术进阶" class="headerlink" title="第二阶段：技术进阶"></a>第二阶段：技术进阶</h2><p><a href="https://www.bilibili.com/video/BV1ux411d75J">JavaScript 全套教程，Web 前端必学的 JS 入门教程，零基础 JavaScript 入门</a><br><a href="https://www.bilibili.com/video/BV1k4411w7sV">JavaScript 核心教程，前端基础教程，JS 必会的 DOM BOM 操作</a><br><a href="https://www.bilibili.com/video/BV1zs411h74a">AJAX 零基础到精通_整合 Git 核心内容全套教程</a></p><h2 id="第三阶段-VUE-开发"><a href="#第三阶段-VUE-开发" class="headerlink" title="第三阶段 VUE 开发"></a>第三阶段 VUE 开发</h2><p><a href="https://www.bilibili.com/video/BV1a34y167AZ">Node.js 全套入门教程，nodejs 最新教程含 es6 模块化+npm+express+webpack+promise 等</a><br><a href="https://www.bilibili.com/video/BV1zq4y1p7ga">Vue 全套视频教程，从 vue2.0 到 vue3.0 一套全覆盖，前端必会的框架教程</a></p><h2 id="第四阶段-React-amp-小程序开发学"><a href="#第四阶段-React-amp-小程序开发学" class="headerlink" title="第四阶段 React&amp;小程序开发学"></a>第四阶段 React&amp;小程序开发学</h2><p><a href="https://www.bilibili.com/video/BV1gh411U7JD">黑马前端 React 精品教程， React 零基础入门到原理详解_哔哩哔哩_bilibili</a><br><a href="https://www.bilibili.com/video/BV1834y1676P">黑马程序员前端微信小程序开发教程，微信小程序从基础到发布全流程_企业级商城实战(含 uni-app 项目多端部署)</a><br>作者：黑马程序员 <a href="https://www.bilibili.com/read/cv10431130?spm_id_from=333.999.0.0">2022 年前端学习路线图</a> 出处：bilibili</p><h2 id="▶-其他前端资源"><a href="#▶-其他前端资源" class="headerlink" title="▶ 其他前端资源"></a>▶ 其他前端资源</h2><p>快速搭建 vue 项目的脚手架<a href="https://cli.vuejs.org/zh/">Vue Cli</a><br>基于 vue 脚手架使用最多的 ui 框架<a href="https://element.eleme.cn/#/zh-CN">Element UI</a></p><h3 id="1-vue-element-admin"><a href="#1-vue-element-admin" class="headerlink" title="1.vue-element-admin"></a>1.vue-element-admin</h3><p><a href="https://github.com/PanJiaChen/vue-element-admin">vue-element-admin</a> 是一个后台前端解决方案，它基于 vue 和 element-ui 实现。它使用了最新的前端技术栈，内置了 i18n 国际化解决方案，动态路由，权限验证，提炼了典型的业务模型，提供了丰富的功能组件，它可以帮助你快速搭建企业级中后台产品原型。相信不管你的需求是什么，本项目都能帮助到你。项目作者还搭配了一些教程文章，很值得看！</p><h3 id="2-blog-vue-typescript"><a href="#2-blog-vue-typescript" class="headerlink" title="2.blog-vue-typescript"></a>2.blog-vue-typescript</h3><p><a href="https://github.com/biaochenxuying/blog-vue-typescript">blog-vue-typescript</a> 是基于 Vue 全家桶 + TypeScript + Element-UI 技术栈的简洁时尚博客网站。TypeScript 具有类型系统，且是 JavaScript 的超集，TypeScript 在 2018 年 势头迅猛，可谓遍地开花。Vue3.0 将使用 TS 重写，重写后的 Vue3.0 将更好的支持 TS。2019 年 TypeScript 将会更加普及，能够熟练掌握 TS，并使用 TS 开发过项目，将更加成为前端开发者的优势。</p><h3 id="3-若依管理系统"><a href="#3-若依管理系统" class="headerlink" title="3.若依管理系统"></a>3.若依管理系统</h3><p><a href="http://www.ruoyi.vip/">若依管理系统</a> 基于 SpringBoot 的权限管理系统</p><p><a href="http://doc.ruoyi.vip/ruoyi-vue/">RuoYi-Vue</a> 是一个 Java EE 企业级快速开发平台，基于经典技术组合（Spring Boot、Spring Security、MyBatis、Jwt、Vue），内置模块如：部门管理、角色用户、菜单及按钮授权、数据权限、系统参数、日志管理、代码生成等。在线定时任务配置；支持集群，支持多数据源，支持分布式事务。</p><h3 id="4-Vue-相关开源项目库汇总"><a href="#4-Vue-相关开源项目库汇总" class="headerlink" title="4.Vue 相关开源项目库汇总"></a>4.Vue 相关开源项目库汇总</h3><p><a href="https://github.com/opendigg/awesome-github-vue">Vue 相关开源汇总</a> 汇总了 vue 相关的很多开源项目，star 数相对较多的；包括 UI 组件、框架爱、工具库等等，推荐看！</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>#vue</tag>
      
      <tag>#element</tag>
      
      <tag>#基础</tag>
      
      <tag>#前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>创建简单的Nodejs服务器</title>
    <link href="/2022/03/04/article/"/>
    <url>/2022/03/04/article/</url>
    
    <content type="html"><![CDATA[<p>1.创建一个 package.json 文件<br>npm init</p><p>2.下载包，–sava 是用来记录并保存下载的包名称在 package.json 文件中<br>npm install 包名称 –save install 可简写成 i<br>如：npm install express –save #可简写形式 npm i express–save<br>在别的地方用安装过得包，只要拷贝 package.json 文件放到要安装的路径下并运行第 1 步</p><p>3.1 express 必须 &#x2F;&#x2F;–sav 是把下载的包名称保存到 package.json 文件中<br>npm install express –save</p><p>3.2 bodyParser 用于解析客户端请求的 body 中的内容,内部使用 JSON 编码处理,url 编码处理以及对于文件的上传处理.<br>npm i body-parser –save</p><p>3.3 mysql 用到数据库下载这个<br>npm install mysql –save</p><p>3.4 cors 跨域<br>npm i cors –save</p><p>下载完成后，在根目录下创建服务器</p><ol><li>创建 server.js 文件<br>server.js 文件代码如下</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引入结构件</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mysql&quot;</span>);<br><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;body-parser&quot;</span>);<br><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;cors&quot;</span>);<br><br><span class="hljs-comment">// 使用express构建web服务器</span><br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-keyword">var</span> server = app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">4000</span>,<span class="hljs-function">()=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;服务器启动成功,IP地址为:http://localhost:4000&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 配置跨域模块，允许那个地址可以跨域访问</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cors</span>(&#123;<br><span class="hljs-attr">orign</span>: [<span class="hljs-string">&quot;http://127.0.0.1:8080&quot;</span>,<br><span class="hljs-string">&quot;http://localhost:8080&quot;</span>],<br><span class="hljs-attr">credentials</span>:<span class="hljs-literal">true</span><br>&#125;));<br><br><span class="hljs-comment">// 使用body-parser中间件</span><br>app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">urlencoded</span>(&#123;<span class="hljs-attr">extended</span>:<span class="hljs-literal">false</span>&#125;));<br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;服务器启动成功&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>然后在浏览器中访问自己设置的 IP 地址 localhost:4000</p><p><img src="/./images/node-server.png" alt="node服务"></p>]]></content>
    
    
    <categories>
      
      <category>nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>#nodejs</tag>
      
      <tag>#express</tag>
      
      <tag>#后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
